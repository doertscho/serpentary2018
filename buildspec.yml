version: 0.2

phases:

  install:
    commands:

      # Install protobuf compiler
      # - ...

      # == Go environment setup ==
      # Symlink Lambdas source directory into GOPATH
      - ln -s "${CODEBUILD_SRC_DIR}/lambdas" "/go/src/main"
      # Install golint
      - go get -u github.com/golang/lint/golint

      # == webpack setup ==
      # Install webpack and CLI tools via npm
      - npm install -g webpack
      - npm install -g webpack-cli

  pre_build:
    commands:

      # == Protocol Buffers compilation ==
      # Enter the Protocol Buffers source directory
      # - cd "${CODEBUILD_SRC_DIR}/protos"
      # Build Go version
      # - ...
      # Build TypeScript version
      # - ...

      # == Lambdas source code checks ==
      # Enter the Lambdas source directory (via the symlink)
      - cd "/go/src/main"
      # Fetch all dependencies
      - go get ./...
      # Ensure code passes all lint tests
      - golint -set_exit_status
      # Check for common Go application problems with 'go tool vet'
      - go tool vet .
      # Run all tests included with our application
      - go test .

      # == Web App source code checks ==
      # Enter the Web App source directory
      - cd "${CODEBUILD_SRC_DIR}/webapp"
      # Fetch dependencies
      - npm install
      # Run all tests
      # - ...

  build:
    commands:

      # == Go build ==
      # Enter the Go source directory (via the symlink)
      - cd "$(go env GOPATH)/src/main"
      # Build our Go application
      - go build -o main

      # == Web App build ==
      # Enter the Web App root directory
      - cd "${CODEBUILD_SRC_DIR}/webapp"
      # Run webpack to perform compilation and packaging
      - webpack

      # == AWS deployment ==
      # Enter the project root directory
      - cd "${CODEBUILD_SRC_DIR}"
      # Copy static webapp assets to S3
      - aws s3 cp --recursive webapp/dist/ s3://$WEBSITE_S3_BUCKET/
      # Package application with AWS CloudFormation/SAM
      - aws cloudformation package --template template.yml --s3-bucket $S3_BUCKET --output-template template-export.yml

artifacts:
  type: zip
  files:
    - template-export.yml
