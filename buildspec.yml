version: 0.2

phases:

  install:
    commands:

      # == Go environment setup ==
      # Symlink Lambdas source directory into GOPATH
      - ln -s "${CODEBUILD_SRC_DIR}/lambdas/src" "/go/src/main"

  pre_build:
    commands:

      # == Fetch dependencies ==
      # Get npm package dependencies for Web App
      - cd "${CODEBUILD_SRC_DIR}/webapp"
      - npm install
      # Link global webpack installation
      - npm link webpack

      # == Build Protocol Buffer definitions ==
      # Go back to project root
      - cd "${CODEBUILD_SRC_DIR}"
      # Compile protos to includable Go files for Lambdas
      - chmod +x ./build-protos-for-lambdas.sh
      - ./build-protos-for-lambdas.sh
      # Compile protobufs to TypeScript definitions for Web App
      - chmod +x ./build-protos-for-webapp.sh
      - ./build-protos-for-webapp.sh

      # == Lambdas source code checks ==
      # Enter the lambda source directory (via the symlink)
      - cd "/go/src/main"
      # Make sure config is never passed in through Git-managed files
      - rm -rf conf
      - mkdir conf
      # Pass in some configuration
      - printf "package conf\nconst AllowOrigin string = \"${WEBSITE_BASE_URL}\"" > conf/api.go
      - printf "package conf\nconst TablePrefix string = \"${DB_TABLE_PREFIX}\"" > conf/db.go
      # Get Go package dependencies for Lambdas
      # (this will only work after protobuf compilation)
      - go get -t ./...
      # Ensure code passes all lint tests
      - golint -set_exit_status
      # Check for common Go application problems with 'go tool vet'
      - go tool vet .
      # Run all tests included with our application
      - go test main/lib
      - go test main/db
      - go test main/handlers

      # == Web App source code checks ==
      # Enter the Web App source directory
      - cd "${CODEBUILD_SRC_DIR}/webapp"
      # Make sure config is never passed in through Git-managed files
      - rm -rf conf
      - mkdir conf
      # Pass in some configuration
      - printf "export const API_BASE_URL = '${API_BASE_URL}'" > conf/api.tsx
      - printf "export const COGNITO_REGION = '${COGNITO_REGION}'\nexport const COGNITO_USER_POOL_ID = '${COGNITO_USER_POOL_ID}'\nexport const COGNITO_CLIENT_ID = '${COGNITO_CLIENT_ID}'\n" > conf/cognito.tsx
      # Run all tests
      # - ...

  build:
    commands:

      # == Go build ==
      # Enter the handlers source directory (via the symlink)
      - cd "/go/src/main/dispatchers"
      # Build our Go application
      # TODO: automate to build all files in lambdas/src/dispatchers
      - go build -o ${CODEBUILD_SRC_DIR}/lambdas/dist/get_data get_data/dispatch.go
      - go build -o ${CODEBUILD_SRC_DIR}/lambdas/dist/get_session get_session/dispatch.go

      # == Web App build ==
      # Enter the Web App root directory
      - cd "${CODEBUILD_SRC_DIR}/webapp"
      # Run webpack to perform compilation and packaging
      - webpack --mode=production
      # Don't want to deploy source maps
      - rm dist/*.map

      # == AWS deployment ==
      # Enter the project root directory
      - cd "${CODEBUILD_SRC_DIR}"
      # Copy static webapp assets to S3
      - aws s3 cp --recursive webapp/dist/ s3://$WEBSITE_S3_BUCKET/
      # Invalidate CloudFront cache for the app's main files
      - aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_DISTRIBUTION_ID} --paths /serpentary.js /serpentary.css
      # Package application with AWS CloudFormation/SAM
      - aws cloudformation package --template template.yml --s3-bucket $S3_BUCKET --output-template template-export.yml

artifacts:
  type: zip
  files:
    - template-export.yml
